0.
매핑의 종류에서 고려할 것은 주로 3개이다.
다중성( ex) 1:N ),
방향,
연관관계의 주인

4강에서는 1:N 인 관계에 있어서 N쪽에다 연관관계의 주인을 설정하는게 좋다고 하였다.
하지만 그 외에 어떤 형태가 존재할까


5-1.
1)1:N 단방향
    엔티티클래스에서 주인이 아닌쪽에 mappedBy는 쓰이지 않았다.
    orm 과 db의 차이점때문에 반대편 외래키를 연관관계의 주인이 관리를 해야한다.
    테이블 1:N 관계는 항상 N쪽에 외래키가 있다.
    때문에 1쪽이 연관관계의 주인이 된다.
    때문에 JoinColumn을 꼭 사용해야한다.
    그렇지 않으면 Join을 위한 테이블이 자동으로 만들어진다.
2) 단점
- 엔티티가 관리하는 외래키가 다른 테이블에 있다. => 이거 자체가 단점이라 생각함?
- 추가적인 update sql문으로 인한 성능저하(미비하지만)와 추적의 어려움
3) 1:N 단방향 보다는 N:1 양방향 매핑이 더 좋다.


5-2.
일대다 양방향
N:1 양방향 매핑은 insertable =false, updateable = false 를 하면된다.
읽기 전용으로 강제적으로 만드는


5-3.
일대일 관계
1) 주 테이블이나 대상 테이블 중에 외래키가 있다.
    일대일 관계는 db 유니크 제약조건이 걸려있을때 쓰는게 좋다.

2) 주 테이블에 외래키가 존재하는경우 단방향
    @JoinColumn은 넣어주자, 기본으로 생성되는 id 값은 있지만
    상당히 보기 힘들다.
    단방향 매핑과 같이 @OneToOne을 써주고 @JoinColumn 과 mappedby를 설정하면 된다

3) 주테이블에 외래키가 있는 양방향
-joinColumn과 mappedBy를 단방향 처럼 정의하면 된다.

4)
대상 테이블에 외래키가 있는 경우에는 양방향만 지원한다.
대상 테이블에 외래키가 있는 경우의 단방향은 지원하지 않는다.

5)
정리
주테이블에 fk 가 있는경우
- 주 테이블만 조회해도 대상  테이블의 데이터가 포함되는지 알 수 있음
- 하지만 값이 없으면 fk에 null을 허용해줘야 한다.
- jpa 매핑이 편하다

대상테이블에 fk가 있는 경우
- 주 테이블과 대상테이블이 1:1 에서 1:N으로 변경할 때 편리
- 프록시 기능의 한계로 지연로딩 설정을 해도 항상 즉시 로딩이 된다.


5-4.
다대다
db에서 n:n 은 안된다.
그런데 객체의 세계에서는 된다.
1) 단방향이랑 비슷하다. 대신 주 테이블에 @JoinColumn을 써야한다.
2) 보통은 안쓴다.
    테이블에 단순한 연결이상의 사용으로 쓰일 경우가 대부분이고
    테이블을 사용하려해도 쿼리도 생각대로 나오지 않는다.
3) 때문에 n:n의 경우에는 그냥 Entity를 하나 만들어서
    1:n 과 n:1 의 관계를 만들어주는게 낫다.(@OneToMnay와 @ManyToOne을 각각쓰면 된다.)













